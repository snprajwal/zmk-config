// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro
#define LHYP LG(LA(LS(LCTRL)))
#define RHYP RG(RA(RS(RCTRL)))
#define LHRM(k1,k2,k3,k4,k5) &ht LSHFT k1  &ht LALT k2  &ht LGUI k3  &ht LCTRL k4  &ht LHYP k5
// The right hand mod uses LALT as RALT is interpreted as ISO level 3 shift
#define RHRM(k1,k2,k3,k4,k5) &ht RHYP k1  &ht RCTRL k2  &ht RGUI k3  &ht LALT k4  &ht RSHFT k5

// Layers
#define COLEMAK 0
#define SPL_LEFT 1
#define SPL_RIGHT 2
#define UTIL 3

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <140>;
            quick-tap-ms = <100>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <40>;
            key-positions = <13 16>;
            bindings = <&kp ESC>;
        };
        combo_minus {
            timeout-ms = <40>;
            key-positions = <12 17>;
            bindings = <&kp MINUS>;
        };
        combo_under {
            timeout-ms = <40>;
            key-positions = <11 18>;
            bindings = <&kp UNDER>;
        };
        combo_caps_word {
            timeout-ms = <40>;
            key-positions = <10 19>;
            bindings = <&caps_word>;
        };
        combo_prev_word {
            timeout-ms = <40>;
            key-positions = <20 29>;
            bindings = <&kp LC(LEFT)>;
        };
        combo_next_word {
            timeout-ms = <40>;
            key-positions = <21 28>;
            bindings = <&kp LC(RIGHT)>;
        };
        combo_ble {
            timeout-ms = <40>;
            key-positions = <0 9>;
            bindings = <&out OUT_TOG>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp Q      &kp W      &kp F      &kp P      &kp G          &kp J      &kp L      &kp U      &kp Y      &kp SEMI
            LHRM(A,        R,         S,         T,         D)         RHRM(H,        N,         E,         I,         O)
            &kp Z      &kp X      &kp C      &kp V      &kp B          &kp K      &kp M      &kp COMMA  &kp DOT    &kp FSLH
                            &lt SPL_RIGHT SPACE  &lt UTIL TAB          &ht RALT ENTER  &lt SPL_LEFT BSPC
            >;
        };

        spl_left_layer {
            bindings = <
            &kp TILDE  &kp HASH   &kp AT     &kp EXCL   &kp PLUS       &trans     &kp LBRC   &kp RBRC   &kp DQT    &trans
            &kp GRAVE  &kp CARET  &kp PRCNT  &kp DLLR   &kp EQUAL      &kp PG_UP  &kp LPAR   &kp RPAR   &kp SQT    &trans
            &trans     &kp PIPE   &kp STAR   &kp AMPS   &kp BSLH       &kp PG_DN  &kp LBKT   &kp RBKT   &trans     &trans
                                             &trans     &trans         &trans     &trans
            >;
        };

        spl_right_layer {
            bindings = <
            &trans     &kp HOME   &trans     &kp END    &trans          &trans     &kp N1     &kp N2     &kp N3     &trans
            &trans     &kp LEFT   &kp UP     &kp RIGHT  &kp PG_UP       &kp PSCRN  &kp N4     &kp N5     &kp N6     &kp N0
            &trans     &trans     &kp DOWN   &trans     &kp PG_DN       &kp INS    &kp N7     &kp N8     &kp N9     &trans
                                             &trans     &trans          &trans     &kp DEL
            >;
        };

        util_layer {
            bindings = <
          &bootloader  &trans    &kp C_BRI_DN &kp C_BRI_UP  &bt BT_SEL 0    &kp F1     &kp F2     &kp F3     &kp F4   &bootloader
          &sys_reset  &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP  &bt BT_SEL 1    &kp F5     &kp F6     &kp F7     &kp F8   &sys_reset
          &bt BT_CLR  &kp C_PREV   &kp C_PP    &kp C_NEXT   &bt BT_SEL 2    &kp F9     &kp F10    &kp F11    &kp F12    &trans
                                               &trans         &trans        &trans     &trans
            >;
        };
    };
};
